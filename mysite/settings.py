"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Перемення окружения для .env
# 1-й вариант
import os
from dotenv import load_dotenv
load_dotenv()
env_path = Path('.')/'.env'
load_dotenv(dotenv_path=env_path)

# Перемення окружения для .env
# 2-й вариант
# import os
# from dotenv import load_dotenv
# # env_path = os.path.join(os.path.dirname(__file__), '.env')  # не работает (((
# env_path = os.path.join(Path(__file__).resolve().parent.parent, '.env')
# if os.path.exists(env_path):
#     load_dotenv(env_path)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'SECRET_KEY'

SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Добавление карты сайта
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.postgres',  # поиск на ДБ postgres
    # Добавление карты сайта
    'django.contrib.sites',
    'django.contrib.sitemaps',

    'taggit',
    'django_extensions',
    'social_django',
    'django_summernote',  # редактор Summernote
    'django_bootstrap5',
    'rest_framework',
    'django_filters',
    'rest_framework.authtoken',

    'blog.apps.BlogConfig',
    'accounts.apps.AccountsConfig',
    'blog_api.apps.BlogApiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # путь о умолчанию к каталогу с шаблонами
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # OAuth 2.0
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv("NAME_PG"),
        'USER': os.getenv("USER_PQ"),
        'PASSWORD': os.getenv("PASSWORD_PG"),
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-RU'

# TIME_ZONE = 'UTC'
TIME_ZONE = "W-SU"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Регистр тегов при поиске не учитывается
# https://django-taggit.readthedocs.io/en/latest/getting_started.html#settings
# TAGGIT_CASE_INSENSITIVE = True


# отправка почты в консоль
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# отправка почты на реальный почтовый сервер
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Конфигурация сервера электронной почты
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS  = os.getenv("EMAIL_USE_TLS")
# Дополнительные параметры
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# SERVER_EMAIL = EMAIL_HOST_USER
# EMAIL_ADMIN = EMAIL_HOST_USER

# когда пользователь вошел/вышел  в систему, он будет отправлен на корневой адрес.
LOGIN_REDIRECT_URL  =  "/"

# После указания в urls template_name='registration/logout.html'  эта настройка больше не нужна
# LOGOUT_REDIRECT_URL = "/"  # На Django 5.0 и выше  удалили выход из системы по запросу GET

# время истечения сеанса равно 30 дней
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30

# аутентификации Google и Github посредством OAuth 2.0
# https://python-social-auth.readthedocs.io/en/latest/configuration/django.html
AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    # 'social_core.backends.google.GoogleOAuth',

    'django.contrib.auth.backends.ModelBackend',
)

# social auth configs for GitHub
SOCIAL_AUTH_GITHUB_KEY = str(os.getenv("GITHUB_KEY"))
SOCIAL_AUTH_GITHUB_SECRET = str(os.getenv("GITHUB_SECRET"))

# social auth configs for Google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = str(os.getenv("GOOGLE_KEY"))
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = str(os.getenv("GOOGLE_SECRET"))


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        # "rest_framework.permissions.AllowAny",  #  неограниченный доступ всем
        "rest_framework.permissions.IsAuthenticated",  # API доступен только зарегистрированным пользователям
    ],
    "DEFAULT_FILTER_BACKENDS": ['django_filters.rest_framework.DjangoFilterBackend'],  # pip django_filters

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # пагинация
    'PAGE_SIZE': 3,  # пагинация

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        "rest_framework.authentication.TokenAuthentication",
    ),
}


# Редактор Summernote
SUMMERNOTE_THEME = 'bs5'  # Включить в summernote поддержку Bootstrap5

SUMMERNOTE_CONFIG = {
# Пользовательские настройки Summernote
    'summernote': {
        # 'width': '100%',
        # 'height': '480',

# Кастомизация
    # https://summernote.org/deep-dive/#custom-toolbar-popover
    'toolbar': [
        ['font', ['bold', 'underline', 'clear']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['insert', ['link', 'picture', 'video']],
        ['view', ['fullscreen', 'codeview', 'help']],
    ],

    }
}
"""
SUMMERNOTE_CONFIG = {
    # Использование SummernoteWidget - в iframe
    'iframe': True,

    # Или вы можете установить значение `False`, чтобы использовать SummernoteInplaceWidget - без режима iframe.
    # В этом случае вам придется загружать источники и зависимости Bootstrap/jQuery вручную.
    # Используйте это, когда вы уже используете темы на основе Bootstrap/jQuery.

    # Пользовательские настройки Summernote
    'summernote': {
        # Включение Air-mode
        # Подробнее - https://summernote.org/examples/
        'airMode': False,

        # Размеры редактора
        'width': '100%',
        'height': '480',

        # Язык редактора
        'lang': None,

        # Кастомизация
        # https://summernote.org/deep-dive/#custom-toolbar-popover
        'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
        ],

        # Вы также можете добавить пользовательские настройки для внешних плагинов
        'print': {
            'stylesheetUrl': '/some_static_folder/printable.css',
        },
        'codemirror': {
            'mode': 'htmlmixed',
            'lineNumbers': 'true',
            # Вы должны включить файл темы в 'css' или 'css_for_inplace' перед его использованием.
            'theme': 'monokai',
        },
    },

    # Требовать аутентификацию пользователей для загрузки вложений.
    'attachment_require_authentication': True,

    # Установите функцию `upload_to` для вложений.
    'attachment_upload_to': my_custom_upload_to_func(),

    # Установите пользовательский класс хранения для вложений.
    'attachment_storage_class': 'my.custom.storage.class.name',

    # Установка пользовательской модели для вложений (default: 'django_summernote.Attachment')
    'attachment_model': 'my.custom.attachment.model',  # должен наследовать 'django_summernote.AbstractAttachment'

    # Вы можете полностью отключить функцию вложений.
    'disable_attachment': False,

    # Установите значение `True`, чтобы возвращать пути вложений в абсолютных URI.
    'attachment_absolute_uri': False,

    # Вы можете добавить пользовательские css/js для SummernoteWidget.
    # Обязательно поместите {{ form.media }} в шаблон перед тем, как инициировать summernote.
    'css': (
    ),
    'js': (
    ),

    # Ленивая инициализация (lazy-load)
    'lazy': True,

}
"""




# Для режима DEBUG = True
# указываем путь к хранению медиафайлов
MEDIA_ROOT = BASE_DIR/'media'
# указываем префикс пути для медиафайлов
MEDIA_URL = '/media/'


